doctype html
html
	head
		meta( charset='UTF-8')
		meta( name='viewport', content='maximum-scale=1,width=device-width,initial-scale=1,user-scalable=0')
		title Barnes Collection Scripts Dashboard
		link(href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.min.css", rel="stylesheet")
		link( href="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.13/css/dataTables.bootstrap.css", rel="stylesheet")
		script(src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js")
		script(src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js")
		script(src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.min.js")
	body
		h1 Dashboard
		section
			div.panel.panel-default
				div.panel-heading
					h2.panel-title TMS to CSV Exporter
				div#tmsExportPanelBody.panel-body
					p
						span Loading...
		section
			div.panel.panel-default
				div.panel-heading
					h2.panel-title Exported CSV files
				div#csvFilesPanelBody.panel-body
					p
						span Loading...
		section
			div.panel.panel-default
				div.panel-heading
					h2.panel-title Elasticsearch
				div#esPanelBody.panel-body
					p
						span Loading...
		section
			div.panel.panel-default
				div.panel-heading
					h2.panel-title Image Processing
				div#imageProcessingPanelBody.panel-body
					p
						span Loading...

	script.
		$(function() {

			var lastCSVData = {
				active: null,
				csv: null,
				status: null
			};

			var hasViewForName = {};

			function fetchCSVFileInfo() {
				$.ajax("./csvFiles").done(function(data) {
					$("#csvFilesPanelBody").empty();
					$("#csvFilesPanelBody").append(data);
					bindESSyncButtons();
					hasViewForName["csv"] = true;
				});
				if (lastCSVData.active) setTimeout(fetchCSVFileInfo, 5000);
			}

			function fetchESInfo() {
				$.ajax("./es").done(function(data) {
					$("#esPanelBody").empty();
					$("#esPanelBody").append(data);
					bindESSearchButtons();
					hasViewForName["es"] = true;
				});
			}

			function fetchImageProcessingInfo() {
				$.ajax("./images").done(function(data) {
					$("#imageProcessingPanelBody").empty();
					$("#imageProcessingPanelBody").append(data);
					hasViewForName["images"] = true;
				});
			}

			function fetchTMSExportInfo() {
				$.ajax("./tmsToCsv").done(function(data) {
					$("#tmsExportPanelBody").empty();
					if (data.success !== false) {
						$("#tmsExportPanelBody").append(data);
						bindTMSExportButtons();
						hasViewForName["tmstocsv"] = true;
					}
				});
			};

			function handleESServiceUpdate(name, status, data) {
				if (data.hasImportedCSV === false) {
					$("#es_status").text("Elasticsearch not yet synced with a CSV");
				} else {
					$("#es_status").text(`ES synchronized with ${data.lastImportedCSV}`);
					$("#es_count").text(`Total objects in ES: ${data.count}`);
					$("#images-total-objects").text(data.count);
				}
				if (status === "completed") fetchCSVFileInfo();
			}

			function handleImagesServiceUpdate(name, status, data) {
				$("#images-running").text(data.isRunning);
				$("#images-progress").text(`${data.numImagesUploaded} of ${data.totalImagesToUpload} images processed.`);
				$("#images-tiled").text(data.numTiledImages);
				$("#images-uploaded").text(data.numRawImages);
			}

			function handleTMSServiceUpdate(name, status, data) {
				$("#active").text(`${data.active}`);
				$("#progress").text(`${data.processed} of ${data.total} objects processed`);
				$("#images-total-object").text(data.total);

				var needsCSVFetch = false;
				needsCSVFetch |= (data.active !== lastCSVData.active && data.active);
				needsCSVFetch |= (data.status !== lastCSVData.status);

				lastCSVData.active = data.active;
				lastCSVData.csv = data.csv;
				lastCSVData.status = data.status;

				if (needsCSVFetch) fetchCSVFileInfo();
			}

			var viewNames = {
				csv: "csvFilesPanelBody",
				es: "esPanelBody",
				images: "imageProcessingPanelBody",
				tmstocsv: "tmsExportPanelBody"
			};

			var serviceViewUris = {
				csv: fetchCSVFileInfo,
				es: fetchESInfo,
				images: fetchImageProcessingInfo,
				tmstocsv: fetchTMSExportInfo
			};

			var websocketUpdateHandlers = {
				es: handleESServiceUpdate,
				images: handleImagesServiceUpdate,
				tmstocsv: handleTMSServiceUpdate
			};

			function clearServiceView(name) {
				var viewName = viewNames[name];
				if (viewName !== undefined) {
					$.ajax('/empty').done(function(data) {
						$("#" + viewName).empty();
						$("#" + viewName).append(data);
						delete hasViewForName[name];
					});
				}
			}

			function fetchServiceView(name) {
				if (typeof serviceViewUris[name] === "function") {
					if (hasViewForName[name] !== true) serviceViewUris[name]();
				} else {
					console.warn("Received connection from unrecognized microservice name ", name);
				}
			}

			function handleWebsocketServiceUpdate(name, status, data) {
				if (typeof websocketUpdateHandlers[name] === "function") {
					websocketUpdateHandlers[name](name, status, data);
				} else {
					console.warn("Received update from unrecognized microservice name ", name);
				}
			}

			function createUpdateSocket(port) {
				var socket = io(window.location.protocol + "//" + window.location.hostname + ":" + port);
				socket.on('status', handleWebsocketServiceUpdate);
				socket.on('announce', fetchServiceView);
				socket.on('farewell', clearServiceView);
				socket.on('connect', function() {
					socket.emit('listNames');
				});
				return socket;
			}

			var socket = createUpdateSocket(window.location.port);
			function updateSearchResults(data) {
				$("#search_results").text(JSON.stringify(data));
			}

			function doSearchQuery() {
				var query = $("#query")[0].value;
				var port = 9200;
				$.get(window.location.protocol + "//" + window.location.hostname + ":" + port + "/_search?pretty&q=" + query, updateSearchResults);
			}

			function bindESSearchButtons() {
				$("#query_button").click(doSearchQuery);

				$("#query").keypress(function(e, a) {
					if (e.which == 13) {
						doSearchQuery();
						return false;    //<---- Add this line
					}
				});
			}

			function bindESSyncButtons() {
				$(".esSyncButton").click( function() {
					$.ajax({
						contentType: 'application/json',
						data: JSON.stringify({ csv:this.name }),
						dataType: 'json',
						type: 'POST',
						url: './sync'
					});
				});
			}
			bindESSyncButtons();

			function bindTMSExportButtons() {
				$("#tmsRun").click(function() {
					$.get('api/tmstocsv/run', function(response) {
						$("#test").text(response.time);
					});
					$("#tmsCancel").click(function() {
						$.get('api/tmstocsv/cancel');
					});
				});
			}
			bindTMSExportButtons();

			$("#run-images").click(function() {
				$.get('api/images/tile', function(response) {
					
				});
			});
		});